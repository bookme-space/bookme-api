generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// <Domain:User>

model User {
  id          String      @id @default(uuid())
  role        UserRole    @default(User)
  email       String      @unique
  firstname   String
  lastname    String
  birthdate   DateTime?
  password    String?
  nickname    String?
  // avatar
  avUpdated   DateTime?   @db.Timestamp
  avSrcType   SourceType?
  avOriginal  String?
  avThumbnail String?
  // position
  lat         Float?
  long        Float?
  // relations
  ownedPlaces Place[]
}

enum UserRole {
  User
  Admin
  Employee
  PlaceOwner
}

// </Domain:User>

// <Domain:Place>

model Place {
  id          String       @id @default(uuid())
  name        String
  description String
  address     String
  // preview
  pvSrcType   SourceType?
  pvOriginal  String?
  pvThumbnail String?
  // hours of work
  startAt     DateTime     @db.Time
  endAt       DateTime     @db.Time
  // relations
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tags        PlaceTag[]
  gallery     PlacePhoto[]
  seats       PlaceSeat[]
}

model PlaceTag {
  id     String  @id @default(uuid())
  name   String  @unique
  icon   String? @db.VarChar(10)
  places Place[]
}

model PlacePhoto {
  id        String     @id @default(uuid())
  created   DateTime   @default(now()) @db.Timestamp
  order     Int
  // sources
  srcType   SourceType
  original  String
  thumbnail String
  // relations
  placeId   String
  place     Place      @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId, order])
}

model PlaceSeat {
  id        String         @id @default(uuid())
  name      String?
  capaciry  Int
  // relations
  placeId   String
  place     Place          @relation(fields: [placeId], references: [id], onDelete: Cascade)
  timeslots SeatTimeslot[]
}

model SeatTimeslot {
  id      String         @id @default(uuid())
  status  TimeslotStatus @default(Inactive)
  day     DayOfWeek
  startAt DateTime       @db.Time
  endAt   DateTime       @db.Time
  // relations
  seatId  String
  seat    PlaceSeat      @relation(fields: [seatId], references: [id], onDelete: Cascade)
}

enum TimeslotStatus {
  Available
  Booked
  Taken
  Inactive
}

// </Domain:Place>ÃŸ

// <Shared>

enum DayOfWeek {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}

enum SourceType {
  Gif
  Image
  Video
}

// </Shared>
